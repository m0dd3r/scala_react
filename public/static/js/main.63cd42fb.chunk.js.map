{"version":3,"sources":["Client.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","status","error","Error","concat","statusText","console","log","parseJSON","json","Client","getSummary","cb","fetch","accept","then","Tech","_ref","match","react","createElement","params","tech","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","summary","_this2","setState","content","react_router_dom","className","react_router","path","component","target","rel","href","Component","Boolean","window","location","hostname","ReactDOM","render","react_default","a","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAUA,SAASA,EAAYC,GACnB,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,OAAOD,EAET,IAAME,EAAQ,IAAIC,MAAJ,cAAAC,OAAwBJ,EAASK,aAI/C,MAHAH,EAAMD,OAASD,EAASK,WACxBH,EAAMF,SAAWA,EACjBM,QAAQC,IAAIL,GACNA,EAGR,SAASM,EAAUR,GACjB,OAAOA,EAASS,OAGlB,IACeC,EADA,CAAEC,WAxBjB,SAAoBC,GAClB,OAAOC,MAAM,eAAgB,CAC3BC,OAAQ,qBAEPC,KAAKhB,GACLgB,KAAKP,GACLO,KAAKH,KCMJI,SAAO,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACX,OAAOC,EAAA,MAAAC,cAAA,6BAAqBF,EAAMG,OAAOC,QAsC9BC,cAjCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAO,IAFNR,sMAMff,EAAOC,WAAW,SAAAuB,GACdC,EAAKC,SAAS,CACVH,MAAOC,EAAQG,0IAMvB,OACIlB,EAAA,MAAAC,cAACkB,EAAA,EAAD,KACInB,EAAA,MAAAC,cAAA,OAAKmB,UAAU,OACXpB,EAAA,MAAAC,cAAA,wBAAgBQ,KAAKI,MAAMC,OAC3Bd,EAAA,MAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAW1B,IAChCG,EAAA,MAAAC,cAAA,WACID,EAAA,MAAAC,cAAA,kEACAD,EAAA,MAAAC,cAAA,UACID,EAAA,MAAAC,cAAA,KAAGuB,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oDAAlD,oCAvBVC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCZNiC,IAASC,OAAOC,EAAAC,EAAAlC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.63cd42fb.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nfunction getSummary(cb) {\n  return fetch('/api/summary', {\n    accept: \"application/json\"\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(cb);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst Client = { getSummary };\nexport default Client;\n","import {React, Component} from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n} from 'react-router-dom';\n\n//import reactLogo from './images/react.svg';\n//import playLogo from './images/play.svg';\n//import scalaLogo from './images/scala.svg';\nimport Client from \"./Client\";\n\nimport './App.css';\n\nconst Tech = ({match}) => {\n    return <div>Current Route: {match.params.tech}</div>\n};\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {title: ''};\n    }\n\n    async componentDidMount() {\n        Client.getSummary(summary => {\n            this.setState({\n                title: summary.content\n            });\n        });\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <h1>Welcome to {this.state.title}</h1>\n                    <Route path=\"/:tech\" component={Tech}/>\n                    <div>\n                        <h2>Check out the project on GitHub for more information</h2>\n                        <h3>\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/yohangz/scala-play-react-seed\">\n                                scala-play-react-seed\n                            </a>\n                        </h3>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}